class Solution {
    public int lengthOfLongestSubstring(String s) {
         if (s.length()==0) return 0;
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        int max=0;
        for (int i=0, j=0; i<s.length(); ++i){
            if (map.containsKey(s.charAt(i))){
                j = Math.max(j,map.get(s.charAt(i))+1);
            }
            map.put(s.charAt(i),i);
            max = Math.max(max,i-j+1);
        }
        return max;
    }
}

 // public int lengthOfLongestSubstring(String s) {
 //        int[] idx = new int[256];
 //        Arrays.fill(idx, -1);
 //        int max = 0;
 //        for (int i = 0, from = 0; i < s.length(); i++) {
 //            if (idx[s.charAt(i)] >= from) // Since we never clear idx after init, must >= from for validity
 //                from = idx[s.charAt(i)] + 1;
 //            idx[s.charAt(i)] = i;
 //            max = Math.max(max, i - from + 1);
 //        }
 //        return max;
    }

// Say we find s.charAt(i) is already in the map, case 1: its index < from, then our start index should still be from because it is no longer included in the calculation of the length of the string; case 2: index >= from, then our start index should be (index + 1).