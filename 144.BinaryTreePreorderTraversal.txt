/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> lst = new LinkedList<>();
        //in this stack we will only push the right nodes.
        Stack<TreeNode> st = new Stack<>();
        while(root!=null){
            lst.add(root.val);
            //we will push the right node to the stack 
            //and travese the left one so that we can get left and then right.
            if(root.right!=null){
                st.push(root.right);
            }
            root=root.left;
            // we will start traversing the right one if we finish the left traversal
            if(root==null && !st.isEmpty()){
                root= st.pop();
            }
        }
        return lst;
    }
}