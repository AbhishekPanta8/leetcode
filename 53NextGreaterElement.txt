//O(n2) approach
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int n2 = nums2.length;
        int[] arr = new int[n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n2;j++){
                if(nums1[i]==nums2[j]){
                    if(j<n2-1 && nums2[j+1]>nums1[i]){
                            arr[i]=nums2[j+1];
                        }
                    else{
                        for(int k=j;k<n2;k++){
                            if(nums2[k]>nums1[i]){
                                arr[i]=nums2[k];
                                break;
                            }
                            else{
                                arr[i]=-1;
                            }
                        }
                        }
                }
            }
        }
         return arr;
    }
   
}

//O(n) approach
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Map<Integer,Integer> map = new HashMap<>();
        
        Stack<Integer> stack = new Stack<>();
        for(int num:nums2){
            while(!stack.isEmpty() && stack.peek()<num){
                map.put(stack.pop(),num);
            }
            stack.push(num);
        }
        for(int i=0;i<nums1.length;i++){
            nums1[i] = map.getOrDefault(nums1[i],-1);
        }
        return nums1;
    }
}