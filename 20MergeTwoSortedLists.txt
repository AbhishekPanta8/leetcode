//iteration
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode res = new ListNode();
        ListNode result = res;
        
        while(l1!=null && l2!=null){
            ListNode newnode = new ListNode();
            newnode.next=null;
            if(l1.val<l2.val){
                newnode.val=l1.val;
                result.next=newnode;
                result=result.next;
                l1=l1.next;
            }
            else{
                newnode.val = l2.val;
                result.next=newnode;
                result=result.next;
                l2=l2.next;
            }
        }
        if(l1!=null){
            while(l1!=null){
                ListNode newnode = new ListNode();
                newnode.next=null;
                newnode.val=l1.val;
                result.next=newnode;
                result=result.next;
                l1=l1.next;
            }
        }
         if(l2!=null){
            while(l2!=null){
                ListNode newnode = new ListNode();
                newnode.next=null;
                newnode.val=l2.val;
                result.next=newnode;
                result=result.next;
                l2=l2.next;
            }
        }
        return res.next;
    }
}

//iterative shortened
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode res = new ListNode();
        ListNode result = res;
        
        while(l1!=null && l2!=null){
            ListNode newnode = new ListNode();
            newnode.next=null;
            if(l1.val<l2.val){
                newnode.val=l1.val;
                result.next=newnode;
                result=result.next;
                l1=l1.next;
            }
            else{
                newnode.val = l2.val;
                result.next=newnode;
                result=result.next;
                l2=l2.next;
            }
        }
        if(l1!=null){
           result.next=l1;
        }
         if(l2!=null){
            result.next=l2;
        }
        return res.next;
    }
}


//using recursion
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if(list1==null) return list2;
        if(list2==null) return list1;
        if(list1.val<list2.val){
            list1.next=mergeTwoLists(list1.next,list2);
            return list1;
        }
        else{
            list2.next=mergeTwoLists(list1,list2.next);
            return list2;
        }
    }
}